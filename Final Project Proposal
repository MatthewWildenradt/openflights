  Our intention is to use the OpenFlights data sets “airports.dat” and “routes.dat” to create a directed and weighted graph of all of the airports and the routes between them, weighted by the distance from one airport to the other. We will implement a traversal along with shortest path and landmark path algorithms to determine the best way to get from one location to another. In other words, the end result will be intended to produce answers to one very specific problem.
  
  As previously stated, we will be using the “airports.dat”  and “routes.dat” data sets. To download these, we will first go to OpenFlight’s Github, then simply download those two files, as they are available there. They will then be stored in our Github and on our local cloned repositories, as the files themselves take up less than four MB together. From there, it’s simply  a matter of reading out of the file, which is a CSV. One thing which can make this difficult is missing entries and partial entries. A missing entry simply is not there and throws off the assumed number of entries based on the reported number of entries that the file lists. To account for this we need to check how many are missing and not assume that the file can be trusted to report the amount of airports/routes it records. Another issue will be accounting for entries which do not have some values filled in or have them filled with an incompatible type which could throw off the algorithm reading out of the file. The solution for this is to replace those parts of the entry with valid values which also indicate that there is nothing there, such as NULL or “NA”. Another issue is what type of reading method to use, although switching from CSV to a space delimited file and using if stream will probably work. After the routes and airports are properly read, we can proceed to make a graph with the airports as vertices and the routes as directed edges.

  The two algorithms we will be implementing are the shortest path and landmark path, the difference being that the shortest path will take weights into account using Djikstra’s  algorithm, while the landmark path will be concerned solely with how many flights we have to take. The actual traversal will be a BFS as there will be many airports spread all over the globe, making a DFS that starts on the wrong node run for a prohibitive amount of time. We expect the shortest path algorithm to take two pointers to nodes in a directed weighted graph of the airports with the routes and their distances as edges, and use these to find the shortest path from one to the other considering the distances. We expect the runtime to be about O(N+Nlog(N)), where N is the number of nodes of the graph, as that is how Djisktra’s algorithm works. For the landmark path algorithm, we will take in the same inputs, but we can simply use a BFS to get the minimum spanning tree, which has O(N+N) time, as the edges will not be weighted. The return value for both will be a vector containing the given nodes visited between start and finish.

Timeline:
Week of 4/12: Data Acquisition and Processing to create the tree
Week of 4/19:  Complete BFS traversal and Landmark path algorithm
Week of 4/26: Complete shortest path algorithm using Djikstra’s algorithm
Week of 4/3: Refine the Documentation for the project, plan final presentation
Week of 4/10: Finish final presentation 
